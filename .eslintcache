[{"C:\\Users\\JesusDario\\Desktop\\proyectoMari\\src\\index.jsx":"1","C:\\Users\\JesusDario\\Desktop\\proyectoMari\\src\\App.jsx":"2","C:\\Users\\JesusDario\\Desktop\\proyectoMari\\src\\components\\Navbar.jsx":"3","C:\\Users\\JesusDario\\Desktop\\proyectoMari\\src\\routers\\AppRouter.jsx":"4","C:\\Users\\JesusDario\\Desktop\\proyectoMari\\src\\components\\Temperatura.jsx":"5"},{"size":245,"mtime":1606667065674,"results":"6","hashOfConfig":"7"},{"size":128,"mtime":1606667065662,"results":"8","hashOfConfig":"7"},{"size":666,"mtime":1606667065666,"results":"9","hashOfConfig":"7"},{"size":615,"mtime":1606667065676,"results":"10","hashOfConfig":"7"},{"size":1591,"mtime":1606667841882,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ydl2ly",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"C:\\Users\\JesusDario\\Desktop\\proyectoMari\\src\\index.jsx",[],"C:\\Users\\JesusDario\\Desktop\\proyectoMari\\src\\App.jsx",[],"C:\\Users\\JesusDario\\Desktop\\proyectoMari\\src\\components\\Navbar.jsx",[],"C:\\Users\\JesusDario\\Desktop\\proyectoMari\\src\\routers\\AppRouter.jsx",["23"],"C:\\Users\\JesusDario\\Desktop\\proyectoMari\\src\\components\\Temperatura.jsx",["24","25","26"],"import React, { useState } from \"react\";\r\nimport { fetchPetitionGetTemp } from \"../helpers/fetchPetition\";\r\n\r\nconst Temperatura = ({setTemp, temp}) => {\r\n\r\n  const [temperature, setTemperature] = useState({\r\n    img : '',\r\n    pasa : 1,\r\n    temperature : 0.0\r\n  })\r\n\r\n  const hanldeTemperature = async(e) => {\r\n    e.preventDefault();\r\n    const response = await fetchPetitionGetTemp('temperatura', 'GET');\r\n\r\n    const resp = await response.json();\r\n    \r\n    const { img, pasa, temperature } = resp; \r\n    \r\n    console.log(resp);\r\n\r\n    setTemperature({\r\n      ...temperature,\r\n      img,\r\n      pasa,\r\n      temperature \r\n    })\r\n    \r\n    console.log(temperature.toFixed(2));\r\n\r\n    setTemp(temperature.toFixed(2));\r\n    \r\n    console.log(temp.toFixed(2));\r\n   \r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"padre-temp\">\r\n      <div className=\"row padre-temp\">\r\n        <div className=\"col-4 divisiontemp1\">\r\n          <div className=\"showTemp\">\r\n            <h4 className={ pasa == 1 ? 'verde' : 'rojo'}>{temp}</h4>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-8 divisiontemp2\">\r\n          <div className=\"temp-image\">\r\n            <img height='100%' width='100%' src={`data:image/jpeg;base64,${temperature.img}`} alt=\"image\"/>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-12 text-center cont-boton\">\r\n          <button\r\n            onClick={ hanldeTemperature }\r\n            className=\"btn btn-temp\"\r\n          >\r\n            Obtener temperatura\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Temperatura;\r\n",{"ruleId":"27","severity":1,"message":"28","line":6,"column":3,"nodeType":"29","messageId":"30","endLine":6,"endColumn":7},{"ruleId":"31","severity":2,"message":"32","line":43,"column":29,"nodeType":"29","messageId":"33","endLine":43,"endColumn":33},{"ruleId":"34","severity":1,"message":"35","line":43,"column":34,"nodeType":"36","messageId":"37","endLine":43,"endColumn":36},{"ruleId":"38","severity":1,"message":"39","line":48,"column":13,"nodeType":"40","endLine":48,"endColumn":108},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-undef","'pasa' is not defined.","undef","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement"]